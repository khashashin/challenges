# Task
# To complete this challenge, you must save a line of input from stdin to a variable, print Hello, World. on a single
# line, and finally print the value of your variable on a second line.

# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.
input_string = input()
# Print a string literal saying "Hello, World." to stdout.
print('Hello, World.')
# TODO: Write a line of code here that prints the contents of input_string to stdout.
print(input_string)
##############################################################################
######################    Additional examples   ##############################
##############################################################################
s = 'Hello, world.'
print(str(s))
##############################################################################
######################    Additional examples   ##############################
##############################################################################
print("""
Hello, World.
It's
a
multiline
print
method
""")
print("""
##############################################################################
######################    Additional examples   ##############################
##############################################################################
""")
##############################################################################
######################    Additional examples   ##############################
##############################################################################
print("""\"Python" - it's a very easy language!""")
##############################################################################
######################    Additional examples   ##############################
##############################################################################
a = "Hello, World.\n"
print(repr(a)) # >>> 'Hello, World.\n'
##############################################################################
######################    Additional examples   ##############################
##############################################################################
print('Мы — те {0}, что говорят "{1}!"'.format('рыцари', 'Ни'))
print('{0} и {1}'.format('фарш', 'яйца'))
print('{1} и {0}'.format('фарш', 'яйца'))
print('Этот {food} — {adjective}.'.format(food='фарш', adjective='непередаваемо ужасен'))
print('История о {0}е, {1}е, и {other}е.'.format('Билл', 'Манфред', other='Георг'))
##############################################################################
######################    Additional examples   ##############################
##############################################################################
# После имени поля может следовать необязательный спецификатор формата ‘:’. С его помощью можно управлять форматированием значения.
# Следующий пример оставляет у числа Пи только три цифры после десятичного разделителя.
import math
print('Значение ПИ — примерно {0:.3f}.'.format(math.pi)) #>>> Значение ПИ — примерно 3.142.
# После спецификатора ‘:’ можно указать число — минимальную ширину поля, выраженную в количестве символов.
# Это удобно использовать для создания красивых таблиц:
table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
for name, phone in table.items(): print('{0:10} ==> {1:10d}'.format(name, phone))
# Если ваша строка с форматами очень длинна, а вы не хотите разбивать её на подстроки, было бы неплохо если бы вы могли
# ссылаться на переменные, предназначенные для форматирования, не по позиции, а по имени. Это можно сделать, просто
# передав словарь и используя квадратные скобки ‘[]’ для доступа к ключам.
table2 = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; Dcab: {0[Dcab]:d}'.format(table2))
# Тоже самое можно сделать, передав словарь именованных параметров, используя нотацию „**“:
table3 = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table3))
# Форматирование строк в старом стиле
# Для форматирования строк можно использовать и операцию %. Она интерпретирует левый операнд как строку
# форматирования в стиле sprintf, которую следует применить к правому операнду, и возвращает строку, получившуюся в
# результате этого преобразования. Например:
print('Значение ПИ — примерно %5.3f.' % math.pi)
# Поскольку метод str.format() довольно нов, большая часть исходных кодов Python всё ещё использует операцию %.
# Однако, со временем, форматирование строк будет удалено из языка, поэтому в большинстве случаев следует использовать str.format().
